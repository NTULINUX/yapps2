#
# Yapps 2 Runtime, part of Yapps 2 - yet another python parser system
# Copyright 1999-2003 by Amit J. Patel <amitp@cs.stanford.edu>
#
# This version of the Yapps 2 Runtime can be distributed under the
# terms of the MIT open source license, either found in the LICENSE file
# included with the Yapps distribution
# <http://theory.stanford.edu/~amitp/yapps/> or at
# <http://www.opensource.org/licenses/mit-license.php>
#

"""Run time libraries needed to run parsers generated by Yapps.

This module defines parse-time exception classes, a scanner class, a
base class for parsers produced by Yapps, and a context class that
keeps track of the parse stack.

"""

import sys, re

MIN_WINDOW=4096
# File lookup window

class SyntaxError(Exception):
    """When we run into an unexpected token, this is the exception to use"""
    def __init__(self, charpos=None, msg="Bad Token", context=None):
        Exception.__init__(self)
        self.charpos = charpos
        self.msg = msg
        self.context = context
        
    def __str__(self):
        if not self.charpos: return 'SyntaxError'
        else: return 'SyntaxError@%s(%s)' % (repr(self.charpos), self.msg)

class NoMoreTokens(Exception):
    """Another exception object, for when we run out of tokens"""
    pass

class Token(object):
    """Yapps token.

    This is a container for a scanned token.
    """

    def __init__(self, type,value, pos=None):
        """Initialize a token."""
        self.type = type
        self.value = value
        self.pos = pos

    def __repr__(self):
        output = '<%s: %s' % (self.type, repr(self.value))
        if self.pos:
            output += " @ "
            if self.pos[0]:
                output += "%s:" % self.pos[0]
            if self.pos[1]:
                output += "%d" % self.pos[1]
            if self.pos[2] is not None:
                output += ".%d" % self.pos[2]
        output += ">"
        return output

class Scanner(object):
    """Yapps scanner.

    The Yapps scanner can work in context sensitive or context
    insensitive modes.  The token(i) method is used to retrieve the
    i-th token.  It takes a restrict set that limits the set of tokens
    it is allowed to return.  In context sensitive mode, this restrict
    set guides the scanner.  In context insensitive mode, there is no
    restriction (the set is always the full set of tokens).
    
    """
    
    def __init__(self, patterns, ignore, input="",
            file=None,filename=None,stacked=False):
        """Initialize the scanner.

        Parameters:
          patterns : [(terminal, uncompiled regex), ...] or None
          ignore : [terminal,...]
          input : string

        If patterns is None, we assume that the subclass has
        defined self.patterns : [(terminal, compiled regex), ...].
        Note that the patterns parameter expects uncompiled regexes,
        whereas the self.patterns field expects compiled regexes.
        """
        self.input = input
        self.ignore = ignore
        self.file = file
        self.filename = filename
        self.pos = 0
        self.del_pos = 0 # skipped
        self.del_line = 0 # skipped
        self.line = 1
        self.col = 0
        self.tokens = []
        self.last_token = None
        self.stack = None
        self.stacked = stacked
        
        if patterns is not None:
            # Compile the regex strings into regex objects
            self.patterns = []
            for terminal, regex in patterns:
                self.patterns.append( (terminal, re.compile(regex)) )

    def stack_input(self, input="", file=None, filename=None, token=None):
        """Temporarily parse from a second file."""

        # Already read from somewhere else: Go on top of that, please.
        if self.stack:
            if not filename:
                filename = 1
            elif isinstance(filename,int):
                filename += 1
            self.stack.stack(input,file,filename,token)

        if isinstance(filename,int):
            filename = "<str_%d>" % filename

        self.stack = object.__new__(self.__class__)
        Scanner.__init__(self.stack,self.patterns,self.ignore,input,file,filename, stacked=True)
        self.stack_token = token

    def get_pos(self):
        """Return a file/line/char tuple."""
        if self.stack: return self.stack.get_pos()

        return (self.filename, self.line, self.pos+self.del_pos)

#    def __repr__(self):
#        """Print the last few tokens that have been scanned in"""
#        output = ''
#        for t in self.tokens:
#            output += '%s\n' % (repr(t),)
#        return output
    
    def print_line_with_pointer(self, p, out=sys.stderr):
        """Print the line of 'text' that includes position 'p',
        along with a second line with a single caret (^) at position p"""

        file,line,p = p
        if file != self.file:
            if self.stack: return self.print_line_with_pointer(p,out)
            print >>out, "(%s: not in input buffer)" % file
            return

        text = self.input

        line -= self.del_line
        if line > 0:
            while text:
                line = line - 1
                try:
                    cr = text.index("\n")
                except ValueError:
                    if line:
                        text = ""
                    break
                if not line:
                    text = text[:cr]
                    break
                text = text[cr+1:]
        else:
            print >>out, "(%s:%d not in input buffer)" % (file,line)
            return

        # Now try printing part of the line
        text = text[max(p-80, 0):p+80]
        p = p - max(p-80, 0)

        # Strip to the left
        i = text[:p].rfind('\n')
        j = text[:p].rfind('\r')
        if i < 0 or (0 <= j < i): i = j
        if 0 <= i < p:
            p = p - i - 1
            text = text[i+1:]

        # Strip to the right
        i = text.find('\n', p)
        j = text.find('\r', p)
        if i < 0 or (0 <= j < i): i = j
        if i >= 0:
            text = text[:i]

        # Now shorten the text
        while len(text) > 70 and p > 60:
            # Cut off 10 chars
            text = "..." + text[10:]
            p = p - 7

        # Now print the string, along with an indicator
        print >>out, '> ',text
        print >>out, '> ',' '*p + '^'
    
    def grab_input(self):
        """Get more input if possible."""
        if not self.file: return
        if len(self.input) < self.pos >= MIN_WINDOW: return

        data = self.file.read(MIN_WINDOW)
        if data is None or data == "":
            self.file = None

        # Drop bytes from the start, if necessary.
        if self.pos > 2*MIN_WINDOW:
            self.del_pos += MIN_WINDOW
            self.del_line += self.input[:MIN_WINDOW].count("\n")
            self.pos -= MIN_WINDOW
            self.input = self.input[MIN_WINDOW:] + data
        else:
            self.input = self.input + data
        

    def token(self, restrict):
        """Should scan another token and add it to the list, self.tokens,
        and add the restriction to self.restrictions"""
        if self.stack:
            try:
                return self.stack.token(restrict)
            except StopIteration:
                self.stack = None
                if self.stack_token: return self.stack_token

        # Keep looking for a token, ignoring any in self.ignore
        while 1:
            self.grab_input()

            # special handling for end-of-file
            if self.stacked and self.pos==len(self.input):
                raise StopIteration

            # Search the patterns for the longest match, with earlier
            # tokens in the list having preference
            best_match = -1
            best_pat = '(error)'
            for p, regexp in self.patterns:
                # First check to see if we're ignoring this token
                if restrict and p not in restrict and p not in self.ignore:
                    continue
                m = regexp.match(self.input, self.pos)
                if m and len(m.group(0)) > best_match:
                    # We got a match that's better than the previous one
                    best_pat = p
                    best_match = len(m.group(0))
                    
            # If we didn't find anything, raise an error
            if best_pat == '(error)' and best_match < 0:
                msg = 'Bad Token'
                if restrict:
                    msg = 'Trying to find one of '+', '.join(restrict)
                raise SyntaxError(self.get_pos(), msg)

            ignore = (best_pat in self.ignore)
            if not ignore:
                value = self.input[self.pos:self.pos+best_match]
                tok=Token(type=best_pat, value=value, pos=self.get_pos())

            self.line 
            self.pos += best_match

            # If we found something that isn't to be ignored, return it
            if not ignore:
                if len(self.tokens) >= 10:
                    del self.tokens[0]
                self.tokens.append(tok)
                self.last_token = tok
                return tok

class Parser(object):
    """Base class for Yapps-generated parsers.

    """
    
    def __init__(self, scanner):
        self._scanner = scanner
        self._tok = None
        self._types = None
        self._last = None
        
    def _stack(self, input="",file=None,filename=None):
        """Temporarily read from someplace else"""
        self._scanner.stack_input(input,file,filename,self._tok)
        self._tok = None

    def _peek(self, *types):
        """Returns the token type for lookahead; if there are any args
        then the list of args is the set of token types to allow"""
        if self._tok is None:
            self._types = types
            self._tok = self._scanner.token(types)
        elif self._types:
            for t in types:
                if t not in self._types:
                    raise NotImplementedError("Unimplemented: restriction set changed")
        return self._tok.type
        
    def _scan(self, type):
        """Returns the matched text, and moves to the next token"""
        tok = self._tok
        if self._tok is None:
            tok = self._scanner.token(self._types)
        else:
            if self._types and type not in self._types:
                raise NotImplementedError("Unimplemented: restriction set changed")

            tok = self._tok
            self._tok = None
        if tok.type != type:
            if not self._types: self._types=[]
            raise SyntaxError(tok.pos, 'Trying to find '+type+': '+ ', '.join(self._types)+", got "+tok.type)
        return tok.value

class Context(object):
    """Class to represent the parser's call stack.

    Every rule creates a Context that links to its parent rule.  The
    contexts can be used for debugging.

    """
    
    def __init__(self, parent, scanner, rule, args=()):
        """Create a new context.

        Args:
        parent: Context object or None
        scanner: Scanner object
        rule: string (name of the rule)
        args: tuple listing parameters to the rule

        """
        self.parent = parent
        self.scanner = scanner
        self.token = scanner.last_token
        self.rule = rule
        self.args = args

    def __str__(self):
        output = ''
        if self.parent: output = str(self.parent) + ' > '
        output += self.rule
        return output
    
def print_error(err, scanner):
    """Print error messages, the parser stack, and the input text -- for human-readable error messages."""
    # NOTE: this function assumes 80 columns :-(
    # Figure out the line number
    file_name, line_number, column_number = scanner.get_pos()
    print >>sys.stderr, '%s:%d:%d: %s' % (file_name, line_number, column_number, err.msg)

    context = err.context
    if not context:
        scanner.print_line_with_pointer(err.charpos)
        
    while context:
        # TODO: add line number
        print >>sys.stderr, 'while parsing %s%s:' % (context.rule, tuple(context.args))
        scanner.print_line_with_pointer(context.token.pos)
        context = context.parent

def wrap_error_reporter(parser, rule):
    try:
        return getattr(parser, rule)()
    except SyntaxError, e:
        print_error(e, parser._scanner)
    except NoMoreTokens:
        print >>sys.stderr, 'Could not complete parsing; stopped around here:'
        print >>sys.stderr, parser._scanner
